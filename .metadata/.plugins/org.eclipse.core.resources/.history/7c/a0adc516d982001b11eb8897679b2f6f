package cn.zhen77.sort;

public class MergeSort {
	public static void main(String[] args) {
		int[] arr ={1,4,6,7,10,2,3,5,8};
		
		sort(arr,0,arr.length -1);
		print(arr);
	}
	static void sort(int[] arr,int left,int right) {
		if(left==right) return;  //说明只有一个元素还排啥顺序;
		//分成两半
//		int mid = (left+right)/2  为什么用下面那个 int型left+right可能越界
		int mid = left+(right-left)/2;
		//左边排序
		sort(arr,left,mid);
		//右边排序
		sort(arr,mid+1,right);
		//左右两遍合并
		merge(arr,left,mid+1,right);
	}
	
	
	
	//已知一个数组前后两段各自已经被排好顺序，如何进行合并
	static void merge(int[] arr,int leftPtr,int rightPtr,int rightBound) {
		int mid = rightPtr-1;
		int[] temp = new int[rightBound-leftPtr+1];//设置一个长度和r-f+1相同的数组
		//设置三个指针
		int i = leftPtr;//左侧指针
		int	j = rightPtr;//右侧指针
		int k = 0;//指向temp数组的指针
		//将左右指针指向的值小的传入temp
		//注意不要忘了+1
		while(i<=mid && j<=rightBound) {
			temp[k++] = arr[i]<=arr[j]?arr[i++]:arr[j++];
		}
		//当一侧的个数远大于另一侧个数时,就将剩下的值全部赋到temp中
		if(i<=mid) temp[k++]=arr[i++];
		if(j<=rightBound) temp[k++]=arr[j++];
		//将temp数组重新赋值给arr
		//这里出错了 
		for(int m=0;m<temp.length;m++) {
			arr[j+m]=temp[m];
		}
	}
	static void print(int[] arr) {
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+"  ");
		}
	}
	
}
